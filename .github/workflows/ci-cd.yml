name: CI/CD Laravel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      APP_ENV: testing
      APP_DEBUG: "false"
      APP_URL: http://localhost
      APP_LOCALE: en
      APP_FALLBACK_LOCALE: en
      APP_FAKER_LOCALE: en_US
      BCRYPT_ROUNDS: "4"
      LOG_CHANNEL: stack
      LOG_LEVEL: debug

      DB_CONNECTION: sqlite
      DB_DATABASE: ":memory:"

      SESSION_DRIVER: array
      SESSION_LIFETIME: "120"
      SESSION_ENCRYPT: "false"

      BROADCAST_CONNECTION: log
      FILESYSTEM_DISK: local
      QUEUE_CONNECTION: sync

      CACHE_STORE: array
      CACHE_DRIVER: array

      MAIL_MAILER: array

      PULSE_ENABLED: "false"
      TELESCOPE_ENABLED: "false"

      STRIPE_CURRENCY: pln
    services:
      sqlite:
        image: nouchka/sqlite3:latest
        ports:
          - 3306:3306
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, pdo, pdo_sqlite, bcmath, gd, xml
          coverage: none

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Clean npm artifacts
        run: |
          rm -rf node_modules package-lock.json || true
          npm cache clean --force || true

      - name: Install NPM dependencies (include optional native binaries)
        run: |
          npm install

      - name: PHP Lint (Pint)
        run: ./vendor/bin/pint --test

      - name: JS Lint (ESLint)
        run: |
          if [ -f node_modules/.bin/eslint ]; then
            npx eslint resources/js || exit 1
          else
            echo "No ESLint found, skipping JS lint."
          fi

      - name: Build assets
        run: npm run build

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Generate Laravel key
        run: php artisan key:generate

      - name: Run migrations
        run: php artisan migrate --env=testing

      - name: Run tests
        run: php artisan test

  docker-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Dockerfile exists
        run: |
          echo "Listing repo root:";
          ls -la
          if [ -f Dockerfile ]; then
            echo "Dockerfile found";
            head -n 20 Dockerfile || true
          else
            echo "ERROR: Dockerfile not found in repo root";
            exit 1;
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (buildx)
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/food-ordering-platform:latest
        run: |
          echo "Starting docker build (buildx) with plain progress to surface logs"
          echo "--- repo tree (top-level) ---"
          ls -la
          echo "--- recursive tree (first 6 levels) ---"
          find . -maxdepth 6 -type f | sed -n '1,200p'
          echo "--- Dockerfile contents ---"
          sed -n '1,200p' Dockerfile || true
          DOCKER_BUILDKIT=1 docker build --progress=plain -f Dockerfile -t $IMAGE_NAME .
          docker push $IMAGE_NAME
